didntWatchTheVideoW<-trajectory("didntWatchTheVideoW")%>%
branch (option = function()  rdiscrete(1,getProbabilityIfNeedToWaitWoman(get_attribute(olympicsGames,"tiredness"),get_attribute(olympicsGames,"times"),get_attribute(olympicsGames,"counter")),c(1,2)) , continue = c(TRUE,TRUE) ,WaitToVideoTester,BackToappliances)
#-------------------4.3 nutritionist trajectories-------------------------------
nutritionist2ForManTrajectory<-trajectory("nutritionist2ForManTrajectory")%>%
batch(10, timeout = function() findStartTime(now(olympicsGames)), permanent = FALSE)%>% #"waiting area"
addService("nutritionist2",function() runif(1,30,40))%>%
separate()
nutritionist1ForWomanTrajectory<-trajectory("nutritionist1ForWomanTrajectory")%>%
batch(10, timeout = function() findStartTime(now(olympicsGames)), permanent = FALSE)%>% #"waiting area"
addService("nutritionist1",function() runif(1,30,40))%>% #Getting organized in locker rooms
separate()
#-------------------4.4 breaks trajectories-------------------------------
#-----sent the Physiotherapists to break
breakPhysiotherapistTrajectory <- trajectory("breakPhysiotherapistTrajectory")%>%
seize("Physiotherapist",amount=5)%>%#"seize" all the Physiotherapist in the room (sent them to break )
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("Physiotherapist",amount=5)
#---sent the Nutritionists to break
breakNutritionist1Trajectory <- trajectory("breakNutritionist1Trajectory")%>%
seize("nutritionist1",amount=1)%>%
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("nutritionist1",amount=1)
breakNutritionist2Trajectory <- trajectory("breakNutritionist2Trajectory")%>%
seize("nutritionist2",amount=1)%>%
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("nutritionist2",amount=1)
#---sent the Video testers to break
breakVideo1Trajectory <- trajectory("breakVideo1Trajectory")%>%
seize("VideoTestersRoom1",amount=2)%>%#"seize" both Video testers in room 1 (sent them to break )
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("VideoTestersRoom1",amount=2)
breakVideo2Trajectory <- trajectory("breakVideo2Trajectory")%>%
seize("VideoTestersRoom2",amount=2)%>%
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("VideoTestersRoom2",amount=2)
breakVideo3Trajectory <- trajectory("breakVideo3Trajectory")%>%
seize("VideoTestersRoom3",amount=2)%>%
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("VideoTestersRoom3",amount=2)
breakVideo4Trajectory <- trajectory("breakVideo4Trajectory")%>%
seize("VideoTestersRoom4",amount=2)%>%
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("VideoTestersRoom4",amount=2)
breakVideo5Trajectory <- trajectory("breakVideo5Trajectory")%>%
seize("VideoTestersRoom5",amount=2)%>%
timeout(function() get_global(olympicsGames,"breakTime"))%>%
release("VideoTestersRoom5",amount=2)
#---------main break Trajectory
#clone the fictive entity(break) and send the Duplicates entities to each professional so the entities can send them to a break
breakTrajectory <- trajectory("breakTrajectory")%>%
set_global(keys = "breakTime",value=function() trimmedNorm(6,50/60))%>%# save uniform break Time for all professionals
clone(8,breakPhysiotherapistTrajectory,breakNutritionist1Trajectory,breakNutritionist2Trajectory,breakVideo1Trajectory,breakVideo2Trajectory,breakVideo3Trajectory,breakVideo4Trajectory,breakVideo5Trajectory)%>%
synchronize(wait=TRUE)
#-------------------4.5 MAIN trajectories-------------------------------
#-----man main trajectory
manTrajectory<-trajectory("manTrajectory")%>%
set_attribute(keys = c("tiredness","ParallelBarsDone","ringsDone","horizonalBarDone","pommelHorseDone","GroundWorkeoutDone","jumpToolDone","VideoTestersRoom","counter","times","reset"),value = function() manAttributeInf())%>%  #set is a part of the trajectory-always
addService("MansLockeRooms",function() runif(1,3,5))%>% #Getting organized in locker rooms
branch(option=function() rdiscrete (1,getProbabilityVector(get_attribute(olympicsGames,c("ParallelBarsDone","ringsDone","horizonalBarDone","pommelHorseDone","GroundWorkeoutDone","jumpToolDone"))),c(1,2,3,4,5,6)) ,continue= c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE),ParallelBarsTrajectory,ringsTrajectory,horizonalBarTrajectory,pommelHorseTrajectory,GroundWorkeoutTrajectory,jumpToolTrajectory)%>%
set_attribute(key=c("counter"),value=function() get_attribute(olympicsGames,"counter")+1)%>%
set_attribute(key=c("tiredness","reset"),value=function()tierdnessValue())%>%
set_attribute(key=c("times"),value=function() get_attribute(olympicsGames,"times")+1)%>%
simmer::select(resources = function() paste0("VideoTestersRoom",get_attribute(olympicsGames,"VideoTestersRoom"))) %>%
seize_selected(1, continue = c(TRUE,TRUE) ,post.seize=VideoTestersTrajectory, reject =didntWatchTheVideoM )%>%
rollback(amount = 6,check = function() checkIfNeedToContinueMan(get_attribute(olympicsGames,"tiredness"),get_attribute(olympicsGames,"times")))%>%
branch (option = function() rdiscrete(1,c(0.39,0.61),c(0,1)), continue = c(TRUE) , nutritionist2ForManTrajectory)%>%
set_prioritization(function() c(getPriorityMan(get_attribute(olympicsGames,"tiredness")),2,FALSE))%>%
addService("Physiotherapist",function() rtriangle(1,25,40,33))%>%
addService("mansShower",function() runif(1,8,14))
#-----woman main trajectory
womanTrajectory<-trajectory("womanTrajectory")%>%
set_attribute(keys = c("tiredness","GroundWorkeoutDone","gradualParallelBarsDone","BarDone","jumpToolDone","VideoTestersRoom","counter","times","reset"),value = function() womanAttributeInf())%>%  #set is a part of the trajectory-always
addService("WomansLockeRooms",function() runif(1,3,5))%>% #Getting organized in locker rooms
branch(option=function() rdiscrete (1,getProbabilityVector(get_attribute(olympicsGames,c("GroundWorkeoutDone","gradualParallelBarsDone","BarDone","jumpToolDone"))),c(1,2,3,4)) ,continue= c(TRUE,TRUE,TRUE,TRUE),GroundWorkeoutTrajectory,gradualParallelBarsTrajectory,BarWorkeoutTrajectory,jumpToolTrajectory)%>%
set_attribute(key=c("counter"),value=function() get_attribute(olympicsGames,"counter")+1)%>%
set_attribute(key=c("tiredness","reset"),value=function()tierdnessValue())%>%
set_attribute(key=c("times"),value=function() get_attribute(olympicsGames,"times")+1)%>%
simmer::select(resources = function() paste0("VideoTestersRoom",get_attribute(olympicsGames,"VideoTestersRoom"))) %>%
seize_selected(1, continue = c(TRUE,TRUE) ,post.seize=VideoTestersTrajectory, reject =didntWatchTheVideoW )%>%
rollback(amount = 6,check = function() checkIfNeedToContinueWoman(get_attribute(olympicsGames,"tiredness"),get_attribute(olympicsGames,"times")))%>%
branch (option = function() rdiscrete(1,c(0.39,0.61),c(0,1)), continue = c(TRUE) , nutritionist1ForWomanTrajectory)%>%
set_prioritization(function() c(getPriorityWoman(get_attribute(olympicsGames,"tiredness")),2,FALSE))%>%
addService("Physiotherapist",function() rtriangle(1,25,40,33))%>%
addService("womansShower",function() runif(1,8,14))
##----------------------------------------- 5.  All Generators, ALWAYS LAST. ------------------------------------------------
olympicsGames%>%
add_generator(name="gymnast_man", trajectory=manTrajectory, distribution=to(540,function() rexp(1,0.89955077)),mon=2,priority=0,preemptible = 3,restart = TRUE)%>%
add_generator(name="gymnast_woman", trajectory=womanTrajectory, distribution=to(540,function() rexp(1,0.7903051)),mon=2,priority=0,preemptible = 3,restart = TRUE)%>%
add_generator(name="break", trajectory=breakTrajectory,distribution=at(420),mon=2,priority=10,restart = TRUE)
##----------------------------------------- 6.  reset, run, plots, outputs ------------------------------------------------
# set.seed(456)
# reset(olympicsGames)%>%run(until=simulationTimeolimpicsGames)
#the number of runs we want
n0 <- 64
#run the simulation n0 times
mm1envs <- mclapply(1:n0, function(i) {
set.seed(((i+100)^2)*3-7)
reset(olympicsGames)%>%run(until=simulationTimeolimpicsGames) %>%
wrap()
})
#we calculated the t for our tests
t <- qt(p=.03, df=n0-1, lower.tail=FALSE)
mon_resources <-  get_mon_resources(olympicsGames)
mon_arrivals<-get_mon_arrivals(olympicsGames,ongoing = T)
mon_arrivalsWithoutOngoing<-get_mon_arrivals(olympicsGames,ongoing = F)
mon_attributes <- get_mon_attributes(olympicsGames)
fullData<-get_mon_arrivals(mm1envs) # arrivals data for all reps
fullDataAttributes <- get_mon_attributes(mm1envs) # attributes data for all reps
fullDataArrivalsTrue<-get_mon_arrivals(mm1envs,T) # the full arrival data of all created for all reps
fullDataResources<-get_mon_resources(mm1envs) # the resources data of all replications
#check how much have finished
finished <- sqldf("select replication,count(*) as amountFinished
from fullData
group by replication ")
#check how much have been created
created <- sqldf("select distinct (name) as amountCreated,replication
from fullDataAttributes
group by replication,amountCreated")
#check how many created in each rep
createdForeachRep <- sqldf("Select replication as n,count(*) as CreatedAmount
From created
group by replication")
#check how many has finished for each rep
finishedPrec2 <- sqldf("select n,(amountFinished),(CreatedAmount)
from createdForeachRep join finished on createdForeachRep.n=finished.replication
group by n")
#calculate finish percentage
finishedPrec2$Prec <- finishedPrec2$amountFinished/finishedPrec2$CreatedAmount
#get the leaving of tiredness percentage
howMuchLeftOfTiredness2 <- sqldf(
"select replication,count(*)  as meanFlow
from fullDataAttributes
where (key=='tiredness'and value>2.9 and name not like '%woman%')or(key=='tiredness'and value>2.4 and name like '%woman%')
group by replication")
#add how many created in eac rep
howMuchLeftOfTiredness2$created <- createdForeachRep$CreatedAmount
#create a column for leaving percentage
howMuchLeftOfTiredness2$prec <- howMuchLeftOfTiredness2$meanFlow/howMuchLeftOfTiredness2$created
#max queue for each rep in ground workout
groudWorkoutRep2 <- sqldf(
"select replication, max(queue) as MaxQueueLength
from fullDataResources
where resource == 'GroundWorkeout'
group by replication")
#create a table so we can view the values of the test
dataset <- 0
dataset <- data.frame(QueueMaxLengthInGroundWorkout=0,howMuchLeftOfTiredness=0,finishedPrec=0)
lambda <- 0.05
lambdaNew <- lambda/(1+lambda)
#divide by the amount of the alternatives
a <- 0.09/3
#get the delta for the n test
sdGround <- sd(groudWorkoutRep$MaxQueueLength)
meanGround <- mean(groudWorkoutRep$MaxQueueLength)
deltaGround <-  t*(sdGround/sqrt(n0))
deltaByMeanGround <- deltaGround/meanGround
#paste(deltaByMeanGround)
dataset$QueueMaxLengthInGroundWorkout <- deltaByMeanGround
#get the delta for the n test
sdTiredness <- sd(howMuchLeftOfTiredness$prec)
meanTiredness <- mean(howMuchLeftOfTiredness$prec)
deltaTiredness <-  (t*sdTiredness/sqrt(n0))
deltaBymeanTiredness <- deltaTiredness/meanTiredness
#paste(deltaBymeanTiredness)
dataset$howMuchLeftOfTiredness <- deltaBymeanTiredness
#get the delta for the n test
sdFinished <- sd(finishedPrec$Prec)
meanFinished <- mean(finishedPrec$Prec)
deltaFinished <-  t*(sdFinished/sqrt(n0))
deltaByMeanFinished <- deltaFinished/meanFinished
#paste(deltaByMeanFinished)
dataset$finishedPrec <- deltaByMeanFinished
Nnew <- 15
#check which aspect has the bigger value
#check if the value is bigger then new lambda
if(deltaByMeanFinished<deltaBymeanTiredness & deltaByMeanGround<deltaBymeanTiredness & deltaBymeanTiredness>lambdaNew){
#deltaByMeanTiredness was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew <- n0*((t*sdTiredness/sqrt(n0))/(meanTiredness*lambdaNew))^2
Nnew <- ceiling(Nnew)
paste("The new n is =",Nnew)
}
if(deltaByMeanFinished<deltaByMeanGround & deltaByMeanGround>deltaBymeanTiredness & deltaByMeanGround>lambdaNew){
#deltaByMeanGround was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew <- n0*((t*sdGround/sqrt(n0))/(meanGround*lambdaNew))^2
Nnew <- ceiling(Nnew)
paste("The new n is =",Nnew)
}
if(deltaByMeanFinished>deltaByMeanGround & deltaByMeanFinished>deltaBymeanTiredness & deltaByMeanFinished>lambdaNew){
#deltaByMeanGround was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew <- n0*((t*sdFinished/sqrt(n0))/(meanFinished*lambdaNew))^2
Nnew <- ceiling(Nnew)
paste("The new n is =",Nnew)
}else{}
##############option 1
dataset1 <- 0
dataset1 <- data.frame(QueueMaxLengthInGroundWorkout=0,howMuchLeftOfTiredness=0,finishedPrec=0)
#get the delta for the n test
sdGround1 <- sd(groudWorkoutRep1$MaxQueueLength)
meanGround1 <- mean(groudWorkoutRep1$MaxQueueLength)
deltaGround1 <-  t*(sdGround1/sqrt(n0))
deltaByMeanGround1 <- deltaGround1/meanGround1
#paste(deltaByMeanGround1)
dataset1$QueueMaxLengthInGroundWorkout <- deltaByMeanGround1
#get the delta for the n test
sdTiredness1 <- sd(howMuchLeftOfTiredness1$prec)
meanTiredness1 <- mean(howMuchLeftOfTiredness1$prec)
deltaTiredness1 <-  (t*sdTiredness1/sqrt(n0))
deltaBymeanTiredness1 <- deltaTiredness1/meanTiredness1
#paste(deltaBymeanTiredness1)
dataset1$howMuchLeftOfTiredness <- deltaBymeanTiredness1
#get the delta for the n test
sdFinished1 <- sd(finishedPrec1$Prec)
meanFinished1 <- mean(finishedPrec1$Prec)
deltaFinished1 <-  t*(sdFinished1/sqrt(n0))
deltaByMeanFinished1 <- deltaFinished1/meanFinished1
#paste(deltaByMeanFinished1)
dataset1$finishedPrec <- deltaByMeanFinished1
#n0 was 15 so we created a default value
Nnew1 <- 15
#check which aspect has the bigger value
#check if the value is bigger then new lambda
if(deltaByMeanFinished1<deltaBymeanTiredness1 & deltaByMeanGround1<deltaBymeanTiredness1 & deltaBymeanTiredness1>lambdaNew){
#deltaByMeanTiredness was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew1 <- n0*((t*sdTiredness1/sqrt(n0))/(meanTiredness1*lambdaNew))^2
Nnew1 <- ceiling(Nnew1)
paste("The new n is =",Nnew1)
}
if(deltaByMeanFinished1<deltaByMeanGround1 & deltaByMeanGround1>deltaBymeanTiredness1 & deltaByMeanGround1>lambdaNew){
#deltaByMeanGround was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew1 <- n0*((t*sdGround1/sqrt(n0))/(meanGround1*lambdaNew))^2
Nnew1 <- ceiling(Nnew1)
paste("The new n is =",Nnew1)
}
if(deltaByMeanFinished1>deltaByMeanGround1 & deltaByMeanFinished1>deltaBymeanTiredness1 & deltaByMeanFinished1>lambdaNew){
#deltaByMeanGround was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew1 <- n0*((t*sdFinished1/sqrt(n0))/(meanFinished1*lambdaNew))^2
Nnew1 <- ceiling(Nnew1)
paste("The new n is =",Nnew1)
}else{}
#########################option 2
dataset2 <- 0
dataset2 <- data.frame(QueueMaxLengthInGroundWorkout=0,howMuchLeftOfTiredness=0,finishedPrec=0)
#get the delta for the n test
sdGround2 <- sd(groudWorkoutRep2$MaxQueueLength)
meanGround2 <- mean(groudWorkoutRep2$MaxQueueLength)
deltaGround2 <-  t*(sdGround2/sqrt(n0))
deltaByMeanGround2 <- deltaGround2/meanGround2
#paste(deltaByMeanGround2)
dataset2$QueueMaxLengthInGroundWorkout <- deltaByMeanGround2
#get the delta for the n test
sdTiredness2 <- sd(howMuchLeftOfTiredness2$prec)
meanTiredness2 <- mean(howMuchLeftOfTiredness2$prec)
deltaTiredness2 <-  (t*sdTiredness2/sqrt(n0))
deltaBymeanTiredness2 <- deltaTiredness2/meanTiredness2
#paste(deltaBymeanTiredness2)
dataset2$howMuchLeftOfTiredness <- deltaBymeanTiredness2
#get the delta for the n test
sdFinished2 <- sd(finishedPrec2$Prec)
meanFinished2 <- mean(finishedPrec2$Prec)
deltaFinished2 <-  t*(sdFinished2/sqrt(n0))
deltaByMeanFinished2 <- deltaFinished2/meanFinished2
#paste(deltaByMeanFinished2)
dataset2$finishedPrec <- deltaByMeanFinished2
Nnew2 <- 15
#check which aspect has the bigger value
#check if the value is bigger then new lambda
if(deltaByMeanFinished2<deltaBymeanTiredness2 & deltaByMeanGround2<deltaBymeanTiredness2 & deltaBymeanTiredness2>lambdaNew){
#deltaByMeanTiredness was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew2 <- n0*((t*sdTiredness2/sqrt(n0))/(meanTiredness2*lambdaNew))^2
Nnew2 <- ceiling(Nnew2)
paste("The new n is =",Nnew2)
}
if(deltaByMeanFinished2<deltaByMeanGround2 & deltaByMeanGround2>deltaBymeanTiredness2 & deltaByMeanGround2>lambdaNew){
#deltaByMeanGround was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew2 <- n0*((t*sdGround2/sqrt(n0))/(meanGround2*lambdaNew))^2
Nnew2 <- ceiling(Nnew2)
paste("The new n is =",Nnew2)
}
if(deltaByMeanFinished2>deltaByMeanGround2 & deltaByMeanFinished2>deltaBymeanTiredness2 & deltaByMeanFinished2>lambdaNew){
#deltaByMeanGround was the maximum value and it was bigger then the new lambda
#we will use the details of the table in order to find the new number of runs
Nnew2 <- n0*((t*sdFinished2/sqrt(n0))/(meanFinished2*lambdaNew))^2
Nnew2 <- ceiling(Nnew2)
paste("The new n is =",Nnew2)
}else{}
########### used functions to get data table to order details
#create a table for all data parameters
# table_sd_Mean_For_All_parameters <- data.frame(sd = c(sdTiredness,sdGround,sdFinished) ,
#                                                mean = c(meanTiredness,meanGround,meanFinished),
#                                                Relative_accuracy=c(deltaBymeanTiredness,deltaByMeanGround,deltaByMeanFinished)
# )
# rownames(table_sd_Mean_For_All_parameters) <- c("Tiredness","Ground","Finished")
##get Relative_accuracy
# table_Relative_accuracy <- data.frame(Relative_accuracy=c(deltaBymeanTiredness,deltaByMeanGround,deltaByMeanFinished)
# )
# rownames(table_Relative_accuracy) <- c("Tiredness","Ground","Finished")
View(groudWorkoutRep)
View(dataset)
allAspects1 <- sqldf("select a.replication as Rep1,MaxQueueLength as MaxQueue1,b.prec as tiredPr1,c.Prec as finishedPr1
from groudWorkoutRep1 as a join howMuchLeftOfTiredness1 as b on a.replication=b.replication join
finishedPrec1 as c on a.replication = c.n
group by a.replication,MaxQueueLength,b.prec,c.Prec")
allAspects2 <- sqldf("select a.replication as Rep2,MaxQueueLength as MaxQueue2,b.prec as tiredPr2,c.Prec as finishedPr2
from groudWorkoutRep2 as a join howMuchLeftOfTiredness2 as b on a.replication=b.replication join
finishedPrec2 as c on a.replication = c.n
group by a.replication,MaxQueueLength,b.prec,c.Prec")
allOftheAspects <- sqldf("select *
from allAspects as a join allAspects1 as b on a.replication=Rep1 join
allAspects2 as c on Rep2=a.replication
")
allOftheAspects$Rep1 <- NULL
allOftheAspects$Rep2 <- NULL
pairedTest1 <- t.test(x=allOftheAspects$MaxQueueLength,
y=allOftheAspects$MaxQueue1,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest1)
pairedTest2 <- t.test(x=allOftheAspects$MaxQueueLength,
y=allOftheAspects$MaxQueue2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest2)
pairedTest3 <- t.test(x=allOftheAspects$MaxQueue1,
y=allOftheAspects$MaxQueue2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest3)
pairedTest4 <- t.test(x=allOftheAspects$prec,
y=allOftheAspects$tiredPr1,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest4)
pairedTest5 <- t.test(x=allOftheAspects$prec,
y=allOftheAspects$tiredPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest5)
pairedTest6 <- t.test(x=allOftheAspects$tiredPr1,
y=allOftheAspects$tiredPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest6)
pairedTest7 <- t.test(x=allOftheAspects$finishedPr,
y=allOftheAspects$finishedPr1,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest7)
pairedTest8 <- t.test(x=allOftheAspects$finishedPr,
y=allOftheAspects$finishedPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest8)
pairedTest9 <- t.test(x=allOftheAspects$finishedPr1,
y=allOftheAspects$finishedPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest9)
View(pairedTest1)
paste(pairedTest9$conf.int
paste(pairedTest9$conf.int)
cat(pairedTest9$conf.int)
cat(pairedTest1$conf.int)
cat(pairedTest2$conf.int)
cat(pairedTest3$conf.int)
cat(pairedTest4$conf.int)
cat(pairedTest5$conf.int)
cat(pairedTest6$conf.int)
cat(pairedTest7$conf.int)
cat(pairedTest8$conf.int)
cat(pairedTest9$conf.int)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(tests = c(pairedTest8$conf.int,pairedTest9$conf.int),
Relative_accuracy=c(t8,t9)
)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(tests = c(pairedTest8$conf.int,pairedTest9$conf.int))
View(tTestTable)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(tests = c(pairedTest8$conf.int[0],pairedTest9$conf.int[0]))
View(tTestTable)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(tests = c(pairedTest8$conf.int,pairedTest9$conf.int),
Relative_accuracy=c(deltaBymeanTiredness,deltaByMeanGround,deltaByMeanFinished)
)
sdTiredness
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(tests = c(sdTiredness,sdGround),
Relative_accuracy=c(deltaBymeanTiredness,deltaByMeanGround,deltaByMeanFinished)
)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(sd = c(sdTiredness,sdGround,sdFinished),
Relative_accuracy=c(deltaBymeanTiredness,deltaByMeanGround,deltaByMeanFinished)
)
View(tTestTable)
cat(pairedTest9$conf.int[0])
cat(pairedTest9$conf.int[0])
print(pairedTest9$conf.int[0])
cat(pairedTest9$conf.int[1])
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1]),pairedTest9$conf.int[1]),
upperSide=c(pairedTest1$conf.int[2],pairedTest2$conf.int[2],pairedTest3$conf.int[2],pairedTest4$conf.int[2],pairedTest5$conf.int[2],pairedTest6$conf.int[2],pairedTest7$conf.int[2],pairedTest8$conf.int[2]),pairedTest9$conf.int[2])
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1]),pairedTest9$conf.int[1])
View(tTestTable)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1],pairedTest9$conf.int[1])
upperSide=c(pairedTest1$conf.int[2],pairedTest2$conf.int[2],pairedTest3$conf.int[2],pairedTest4$conf.int[2],pairedTest5$conf.int[2],pairedTest6$conf.int[2],pairedTest7$conf.int[2],pairedTest8$conf.int[2],pairedTest9$conf.int[2])
)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1],pairedTest9$conf.int[1])
upperSide=c(pairedTest1$conf.int[2],pairedTest2$conf.int[2],pairedTest3$conf.int[2],pairedTest4$conf.int[2],pairedTest5$conf.int[2],pairedTest6$conf.int[2],pairedTest7$conf.int[2],pairedTest8$conf.int[2],pairedTest9$conf.int[2])
)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1],pairedTest9$conf.int[1])
upperSide=c(pairedTest1$conf.int[2],pairedTest2$conf.int[2],pairedTest3$conf.int[2],pairedTest4$conf.int[2],pairedTest5$conf.int[2],pairedTest6$conf.int[2],pairedTest7$conf.int[2],pairedTest8$conf.int[2],pairedTest9$conf.int[2]))
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1],pairedTest9$conf.int[1]))
View(tTestTable)
########## used functions to get data table to order details
#create a table for all data parameters
tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1],pairedTest9$conf.int[1]),
upperSide=c(pairedTest1$conf.int[2],pairedTest2$conf.int[2],pairedTest3$conf.int[2],pairedTest4$conf.int[2],pairedTest5$conf.int[2],pairedTest6$conf.int[2],pairedTest7$conf.int[2],pairedTest8$conf.int[2],pairedTest9$conf.int[2])
)
View(tTestTable)
View(tTestTable)
cat(pairedTest9$conf.int[1])
rownames(tTestTable) <- c("MaxQueueLengthCurrVSop1","MaxQueueLengthCurrVSop2","MaxQueueLengthop1VSop2","tirednessCurrVSop1","tirednessCurrVSop2","tirednessOp1VSOp2","finishedPrecCurrVSop1","finishedPrecCurrVSop2","finishedPrecOp1VSop2")
allAspects1 <- sqldf("select a.replication as Rep1,MaxQueueLength as MaxQueue1,b.prec as tiredPr1,c.Prec as finishedPr1
from groudWorkoutRep1 as a join howMuchLeftOfTiredness1 as b on a.replication=b.replication join
finishedPrec1 as c on a.replication = c.n
group by a.replication,MaxQueueLength,b.prec,c.Prec")
allAspects2 <- sqldf("select a.replication as Rep2,MaxQueueLength as MaxQueue2,b.prec as tiredPr2,c.Prec as finishedPr2
from groudWorkoutRep2 as a join howMuchLeftOfTiredness2 as b on a.replication=b.replication join
finishedPrec2 as c on a.replication = c.n
group by a.replication,MaxQueueLength,b.prec,c.Prec")
allOftheAspects <- sqldf("select *
from allAspects as a join allAspects1 as b on a.replication=Rep1 join
allAspects2 as c on Rep2=a.replication
")
allOftheAspects$Rep1 <- NULL
allOftheAspects$Rep2 <- NULL
pairedTest1 <- t.test(x=allOftheAspects$MaxQueueLength,
y=allOftheAspects$MaxQueue1,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest1)
pairedTest2 <- t.test(x=allOftheAspects$MaxQueueLength,
y=allOftheAspects$MaxQueue2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest2)
pairedTest3 <- t.test(x=allOftheAspects$MaxQueue1,
y=allOftheAspects$MaxQueue2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest3)
pairedTest4 <- t.test(x=allOftheAspects$prec,
y=allOftheAspects$tiredPr1,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest4)
pairedTest5 <- t.test(x=allOftheAspects$prec,
y=allOftheAspects$tiredPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest5)
pairedTest6 <- t.test(x=allOftheAspects$tiredPr1,
y=allOftheAspects$tiredPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest6)
pairedTest7 <- t.test(x=allOftheAspects$finishedPr,
y=allOftheAspects$finishedPr1,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest7)
pairedTest8 <- t.test(x=allOftheAspects$finishedPr,
y=allOftheAspects$finishedPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest8)
pairedTest9 <- t.test(x=allOftheAspects$finishedPr1,
y=allOftheAspects$finishedPr2,alternative = "two.sided",
paired = TRUE,var.equal = TRUE,conf.level = 0.99)
print(pairedTest9)
# ########## used functions to get data table to order details
# #create a table for all data parameters
# tTestTable <- data.frame(lowerSide = c(pairedTest1$conf.int[1],pairedTest2$conf.int[1],pairedTest3$conf.int[1],pairedTest4$conf.int[1],pairedTest5$conf.int[1],pairedTest6$conf.int[1],pairedTest7$conf.int[1],pairedTest8$conf.int[1],pairedTest9$conf.int[1]),
#                                                upperSide=c(pairedTest1$conf.int[2],pairedTest2$conf.int[2],pairedTest3$conf.int[2],pairedTest4$conf.int[2],pairedTest5$conf.int[2],pairedTest6$conf.int[2],pairedTest7$conf.int[2],pairedTest8$conf.int[2],pairedTest9$conf.int[2])
# )
# rownames(tTestTable) <- c("MaxQueueLengthCurrVSop1","MaxQueueLengthCurrVSop2","MaxQueueLengthop1VSop2","tirednessCurrVSop1","tirednessCurrVSop2","tirednessOp1VSOp2","finishedPrecCurrVSop1","finishedPrecCurrVSop2","finishedPrecOp1VSop2")
library(rlang)
library(MASS)
library(fitdistrplus)
library(magrittr)
library(dplyr)
library(lazyeval)
library(parallel)
library(e1071)
library(plotly)
library(ggplot2)
library(triangle)
library(sqldf)
library(readxl)
library(knitr)
library(rmarkdown)
library(simmer)
library(simmer.plot)
library(strucchange)
